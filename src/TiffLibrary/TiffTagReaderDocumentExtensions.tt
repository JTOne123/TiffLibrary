<#@ template language="C#" #><#@ import namespace="System.Collections.Generic" #>
<#
    var Fields = new[]
    {
        new
        {
            Name = "DocumentName",
            Type = "string",
            TypeName = "ASCII",
            ReturnType = "string",
            ResultHandling = "result.FirstOrDefault"
        },
        new
        {
            Name = "PageName",
            Type = "string",
            TypeName = "ASCII",
            ReturnType = "string",
            ResultHandling = "result.FirstOrDefault"
        },
        new
        {
            Name = "PageNumber",
            Type = "ushort",
            TypeName = "Short",
            ReturnType = "TiffPageNumber",
            ResultHandling = "result.Count == 0 ? default(TiffPageNumber) : (result.Count == 1 ? new TiffPageNumber(result.FirstOrDefault, 0) : new TiffPageNumber(result.FirstOrDefault, result[1]))"
        },
        new
        {
            Name = "XPosition",
            Type = "TiffRational",
            TypeName = "Rational",
            ReturnType = "TiffRational?",
            ResultHandling = "result.IsEmpty ? default(TiffRational?) : result.FirstOrDefault"
        },
        new
        {
            Name = "YPosition",
            Type = "TiffRational",
            TypeName = "Rational",
            ReturnType = "TiffRational?",
            ResultHandling = "result.IsEmpty ? default(TiffRational?) : result.FirstOrDefault"
        }
    };

#>
using System.Threading.Tasks;

namespace TiffLibrary
{
    public static partial class TiffTagReaderExtensions
    {
    <#
    foreach (var field in Fields)
    {
    #>

        #region <#= field.Name #>

        /// <summary>
        /// Read the values of <see cref="TiffTag.<#= field.Name #>"/>.
        /// </summary>
        /// <param name="tagReader">The tag reader to use.</param>
        /// <returns>A <see cref="ValueTask{TiffValueCollection}"/> that completes when the value of the tag is read and return the read values.</returns>
        public static ValueTask<<#= field.ReturnType #>> Read<#= field.Name #>Async(this TiffTagReader tagReader)
        {
            ValueTask<TiffValueCollection<<#= field.Type #>>> valueTask = tagReader.Read<#= field.TypeName #>FieldAsync(TiffTag.<#= field.Name #>);
            if (valueTask.IsCompletedSuccessfully)
            {
                TiffValueCollection<<#= field.Type #>> result = valueTask.GetAwaiter().GetResult();
                return new ValueTask<<#= field.ReturnType #>>(<#= field.ResultHandling #>);
            }

            return new ValueTask<<#= field.ReturnType #>>(TransformValueTaskAsync(valueTask));

            static async Task<<#= field.ReturnType #>> TransformValueTaskAsync(ValueTask<TiffValueCollection<<#= field.Type #>>> valueTask)
            {
                TiffValueCollection<<#= field.Type #>> result = await valueTask.ConfigureAwait(false);
                return <#= field.ResultHandling #>;
            }
        }

        #endregion
    <#
    }
    #>

    }
}
